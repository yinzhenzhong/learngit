1.安装git
	（1）在linux，windows和mac系统上安装git，详细安装方法见廖雪峰的git教程：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137396287703354d8c6c01c904c7d9ff056ae23da865a000
2.git设置
	 $ git config --global user.name "yinzhenzhong"            //自报家门，让Git知道您的姓名和Email。
	 $ git config --global user.email "13070111186@163.com"
	   注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
3.创建版本库（repository）
  如果你使用Windows系统，为了避免遇到各种莫名其妙的问题，请确保目录名（包括父目录）不包含中文。
     $ cd <file>        //进入目的磁盘                                        eg  $ cd d:
     $ mkdir <dirName>  //创建一个空目录                                      eg  $ mkdir learngit
	 $ cd <dirName>     //进入新建目录                                        eg  $ cd learngit
	 $ pwd              //用于显示当前目录                                    eg    /Users/michael/learngit
	 $ cat <file>       //查看工作文件                                        eg  $ cat readme.txt
	 $ git init         //初始化一个Git仓库，把这个目录变成Git可以管理的仓库  eg    Initialized empty Git repository in /Users/michael/learngit/.git/
	 $ git status       //检查当前仓库的状态,可以让我们时刻掌握仓库当前的状态
	 $ git add <file>   //把文件添加到仓库暂存，对文件的更改已被暂存。这意味着 Git 现在知道这些更改，但还没有永久记录到仓库中
	 $ git commit -m "描述"  	 //提交已暂存的内容到仓库，-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
	                             //添加文件到Git仓库，分两步：
                                 //第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
                                 //第二步，使用命令git commit，完成。
	 $ git diff	<file>           //查看文件具体修改了什么内容
	 $ git log --pretty=oneline  //显示从最近到最远的提交日志,如果嫌输出信息太多，看得眼花缭乱的，可以试试加上--pretty=oneline参数：
	                             // $ git log --pretty=oneline --max-count=2
								 // $ git log --pretty=oneline --since='5 minutes ago'
								 // $ git log --pretty=oneline --until='5 minutes ago'
								 // $ git log --pretty=oneline --author=<your name>
								 //	$ git log --pretty=oneline --all
								 // $ git log --pretty=format:'%h %ad | %s%d [%an]' --graph --date=short'------终极日志格式，详见：http://www.w3cschool.cn/evlyt8/mjnv4ozt.html
     $ git add .        //我们使用当前目录（.）作为要添加的文件。这是一种 添加当前目录及其子目录下所有更改文件的习惯简写方式。 但因为它添加所有东东，所以在做 add . 前检查状态是一 个好主意，只是为了确定你没有添加不想要的文件。     
	 $ git diff HEAD -- <file>   //用git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别：  
	 $ git checkout -- file      //当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file
	                               命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
                                   一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
                                   一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
                                   总之，就是让这个文件回到最近一次git commit或git add时的状态。
	 $ git reset HEAD file       //用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区
4.配置别名
  	 $ git config --global alias.<简写> <原命令>    //给Git配置好别名，就可以输入命令时偷个懒   //$ git config --global alias.st status
	                    //--global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。
						//详见：http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001375234012342f90be1fc4d81446c967bbdc19e7c03d3000
						        http://www.w3cschool.cn/evlyt8/mc5noozt.html
	配置文件：
	        配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
    --------配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
			别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
    --------而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
            配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
5.版本回退
     ・ HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
	 ・ 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。
     ・ 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。	
	 
	 $ git log --pretty=oneline             //显示从最近到最远的提交日志,查看 commit_id。
	 $ git reset --hard HEAD^/commit ID     //HEAD指向的版本就是当前版本，也就是最新的提交.上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100
	 $ git reflog                           //要重返未来，用git reflog查看命令历史，获得commit ID，以便确定要回到未来的哪个版本
6.创建标签
     $ git tag <name>                       //敲命令git tag <name>就可以打一个新标签：    eg $ git tag v1.0
	 $ git tag                              //可以用命令git tag查看所有标签：
	 默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
     方法是找到历史提交的commit id，然后打上就可以了：比方说要对add merge这次提交打标签，它对应的commit id是6224937，敲入命令：
     $ git tag v0.9 6224937
	 $ git show <tagname>                   //用git show <tagname>查看标签信息
	 $ git tag -d <tagname>                 //删除标签
	 还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：$ git tag -a v0.1 -m "version 0.1 released" 3628164
   标记先前的版本
     引用程序的当前版本为 v1，让我们标记当前版本之前的版本为 v1-beta。首先我们需要检出 先前的版本。代替查询哈希，我们将使用 ^ 来表示“v1 的父 提交”。
     如果使用 v1^ 表示法遇到问题，那么你也可以试试 v1~1， 这将引用相同的版本。该表示法意为“v1 的第一个祖先提交”。
	 eg   $ git checkout v1^  然后 $ cat <file>, 继而 $ git tag v1-beta。
7.撤销修改
      场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

      场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

      场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。或者-------
       创建还原提交
       要撤销已提交的更改，我们需要创建一个提交来移除由不想 要的提交所引入的更改。
       $ git revert HEAD
       这将带你到编辑器中。你可以编辑默认的提交信息，或直接 离开它。保存并关闭文件。你应该看到：
       $ git revert HEAD --no-edit
       [ master a10293f] Revert "Oops, we didn't want this commit"
        1 files changed, 1 insertions(+), 1 deletions(-)
       因为我们将撤销我们做的最后提交，所以我们可以使用 HEAD 作为还原的参数。通过简单的指定哈希值，我们可以撤销早期 历史中的任意提交。
       注意：命令中的 --no-edit 可被忽略。在不打开编辑器生成输 出时需要它。	
8.移动文件  
       将 hello.rb 文件移到 lib ：
	   $ mkdir lib
       $ git mv hello.rb lib
       $ git status
	   通过使用 Git 来移动文件，我们通知了 Git 两件事：
       文件 hello.rb 已被删除。
       文件 lib/hello.rb 已被创建。
       这些信息被立即暂存并准备提交。git status 命令将报告文件 已被移动。
	   
	   